// <auto-generated />
using CentruDeTransfuzie;
using CentruDeTransfuzie.utils;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CentruDeTransfuzie.Migrations
{
    [DbContext(typeof(CTContext))]
    [Migration("20180530185631_ElimareColoanePungaSange2")]
    partial class ElimareColoanePungaSange2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CentruDeTransfuzie.model.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Parola")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Analiza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DonatorId");

                    b.Property<int>("Grupa");

                    b.Property<bool>("HIV");

                    b.Property<bool>("HTLV");

                    b.Property<bool>("HepatitaB");

                    b.Property<bool>("HepatitaC");

                    b.Property<int>("NivelALT");

                    b.Property<int?>("PungaSangeId");

                    b.Property<int>("Rh");

                    b.Property<bool>("Sifilis");

                    b.HasKey("Id");

                    b.HasIndex("DonatorId");

                    b.HasIndex("PungaSangeId")
                        .IsUnique()
                        .HasFilter("[PungaSangeId] IS NOT NULL");

                    b.ToTable("Analiza");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.CentruTransfuzie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Judet");

                    b.Property<string>("Nume")
                        .IsRequired();

                    b.Property<string>("Oras");

                    b.Property<string>("Parola")
                        .IsRequired();

                    b.Property<string>("Zona")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Nume")
                        .IsUnique();

                    b.ToTable("CentruTransfuzie");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Cerere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("CantitateGlobuleRosii");

                    b.Property<float>("CantitatePlasma");

                    b.Property<float>("CantitateSange");

                    b.Property<float>("CantitateTrombocite");

                    b.Property<string>("Data");

                    b.Property<bool>("Efectuata");

                    b.Property<int>("Grupa");

                    b.Property<int>("MedicId");

                    b.Property<int>("Prioritate");

                    b.Property<int>("RH");

                    b.HasKey("Id");

                    b.HasIndex("MedicId");

                    b.ToTable("Cerere");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.CererePacient", b =>
                {
                    b.Property<int>("IdCerere");

                    b.Property<int>("IdPacient");

                    b.HasKey("IdCerere", "IdPacient");

                    b.HasIndex("IdPacient");

                    b.ToTable("CererePacient");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Donator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Activ")
                        .HasMaxLength(1);

                    b.Property<DateTime>("DataNastere");

                    b.Property<string>("Domiciliu");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<float>("Greutate");

                    b.Property<int>("InterventiiUltimele6Luni");

                    b.Property<string>("Judet");

                    b.Property<string>("JudetResedinta");

                    b.Property<string>("Localitate");

                    b.Property<string>("LocalitateResedinta");

                    b.Property<string>("Nume");

                    b.Property<string>("Prenume");

                    b.Property<int>("Puls");

                    b.Property<string>("Resedinta");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<int>("SubTratament");

                    b.Property<string>("Telefon")
                        .IsRequired();

                    b.Property<int>("TensiuneDiastolica");

                    b.Property<int>("TensiuneSistolica");

                    b.Property<int?>("UserDonatorId");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Telefon")
                        .IsUnique();

                    b.HasIndex("UserDonatorId")
                        .IsUnique()
                        .HasFilter("[UserDonatorId] IS NOT NULL");

                    b.ToTable("Donator");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Medic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cnp")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Nume")
                        .IsRequired();

                    b.Property<string>("Prenume");

                    b.Property<string>("Telefon")
                        .IsRequired();

                    b.Property<int?>("UserMedicId");

                    b.HasKey("Id");

                    b.HasIndex("Cnp")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Telefon")
                        .IsUnique();

                    b.HasIndex("UserMedicId")
                        .IsUnique()
                        .HasFilter("[UserMedicId] IS NOT NULL");

                    b.ToTable("Medic");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Notificari", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("id_cerere");

                    b.Property<int>("id_donator");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Notificari");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Pacient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("EDonator");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int?>("MedicId");

                    b.Property<string>("Nume")
                        .IsRequired();

                    b.Property<string>("Prenume");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicId");

                    b.ToTable("Pacient");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.PungaSange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("CantitateGlobuleRosii");

                    b.Property<float>("CantitatePlasma");

                    b.Property<float>("CantitateSange");

                    b.Property<float>("CantitateTrombocite");

                    b.Property<int?>("CentruTransfuzieId");

                    b.Property<DateTime>("DataPreluarii");

                    b.Property<int>("DonatorId");

                    b.Property<bool>("EliminatGlobuleRosii");

                    b.Property<bool>("EliminatPlasma");

                    b.Property<bool>("EliminatSange");

                    b.Property<bool>("EliminatTrombocite");

                    b.Property<int?>("TraseuPungaId");

                    b.HasKey("Id");

                    b.HasIndex("CentruTransfuzieId");

                    b.HasIndex("DonatorId");

                    b.HasIndex("TraseuPungaId")
                        .IsUnique()
                        .HasFilter("[TraseuPungaId] IS NOT NULL");

                    b.ToTable("PungaSange");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Spital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adresa");

                    b.Property<int>("CentruTransfuzieId");

                    b.Property<string>("Judet");

                    b.Property<string>("Oras");

                    b.HasKey("Id");

                    b.HasIndex("CentruTransfuzieId");

                    b.ToTable("Spital");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.SpitalMedic", b =>
                {
                    b.Property<int>("IdMedic");

                    b.Property<int>("IdSpital");

                    b.Property<int?>("MedicId");

                    b.Property<int?>("SpitalId");

                    b.HasKey("IdMedic", "IdSpital");

                    b.HasIndex("MedicId");

                    b.HasIndex("SpitalId");

                    b.ToTable("SpitalMedic");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Stoc", b =>
                {
                    b.Property<int>("Grupa");

                    b.Property<int>("RH");

                    b.Property<float>("GlobuleRosii");

                    b.Property<float>("Plasma");

                    b.Property<int>("TermenGlobuleRosii");

                    b.Property<int>("TermenPlasma");

                    b.Property<int>("TermenTrombocite");

                    b.Property<float>("TotalSange");

                    b.Property<float>("Trombocite");

                    b.HasKey("Grupa", "RH");

                    b.ToTable("Stoc");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.TraseuPunga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Prelevata");

                    b.Property<bool>("SosireAnalize");

                    b.Property<bool>("SpitalPacient");

                    b.Property<bool>("StocCentru");

                    b.Property<bool>("TrimiseLaAnalize");

                    b.HasKey("Id");

                    b.ToTable("TraseuPunga");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.UserDonator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Parola")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserDonator");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.UserMedic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Parola")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserMedic");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Analiza", b =>
                {
                    b.HasOne("CentruDeTransfuzie.model.Donator", "Donator")
                        .WithMany("Analize")
                        .HasForeignKey("DonatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CentruDeTransfuzie.model.PungaSange", "PungaSange")
                        .WithOne("Analiza")
                        .HasForeignKey("CentruDeTransfuzie.model.Analiza", "PungaSangeId");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Cerere", b =>
                {
                    b.HasOne("CentruDeTransfuzie.model.Medic", "Medic")
                        .WithMany("Cereri")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.CererePacient", b =>
                {
                    b.HasOne("CentruDeTransfuzie.model.Cerere", "Cerere")
                        .WithMany("CererePacienti")
                        .HasForeignKey("IdCerere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CentruDeTransfuzie.model.Pacient", "Pacient")
                        .WithMany("CereriPacienti")
                        .HasForeignKey("IdPacient")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Donator", b =>
                {
                    b.HasOne("CentruDeTransfuzie.model.UserDonator", "UserDonator")
                        .WithOne("Donator")
                        .HasForeignKey("CentruDeTransfuzie.model.Donator", "UserDonatorId");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Medic", b =>
                {
                    b.HasOne("CentruDeTransfuzie.model.UserMedic", "UserMedic")
                        .WithOne("Medic")
                        .HasForeignKey("CentruDeTransfuzie.model.Medic", "UserMedicId");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Pacient", b =>
                {
                    b.HasOne("CentruDeTransfuzie.model.Medic", "Medic")
                        .WithMany("Pacienti")
                        .HasForeignKey("MedicId");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.PungaSange", b =>
                {
                    b.HasOne("CentruDeTransfuzie.model.CentruTransfuzie", "CentruTransfuzie")
                        .WithMany("PungiSange")
                        .HasForeignKey("CentruTransfuzieId");

                    b.HasOne("CentruDeTransfuzie.model.Donator", "Donator")
                        .WithMany("PungiSange")
                        .HasForeignKey("DonatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CentruDeTransfuzie.model.TraseuPunga", "TraseuPunga")
                        .WithOne("PungaSange")
                        .HasForeignKey("CentruDeTransfuzie.model.PungaSange", "TraseuPungaId");
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.Spital", b =>
                {
                    b.HasOne("CentruDeTransfuzie.model.CentruTransfuzie", "CentruTransfuzie")
                        .WithMany("Spitale")
                        .HasForeignKey("CentruTransfuzieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CentruDeTransfuzie.model.SpitalMedic", b =>
                {
                    b.HasOne("CentruDeTransfuzie.model.Medic", "Medic")
                        .WithMany("SpitaleMedic")
                        .HasForeignKey("MedicId");

                    b.HasOne("CentruDeTransfuzie.model.Spital", "Spital")
                        .WithMany("SpitalMedici")
                        .HasForeignKey("SpitalId");
                });
#pragma warning restore 612, 618
        }
    }
}
